/**
 * Copyright (c) 2010-2021 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.openhab.binding.zmartmodbus.internal.exceptions;


/**
 * @author Peter Kristensen - Initial contribution
 *
 *         The ProtocolException class is the superclass of all errors and
 *         exceptions in the Kura Protocol project. It extends the JDK Exception
 *         class by requesting its invokers to provide an error code when
 *         building its instances. The code is one value of ProtocolErrorCode
 *         enum; the code is used to document the possible error conditions
 *         generated by the platform as well as to identify the localized
 *         exception messages to be reported. Exceptions messages are stored in
 *         the ProtocolExceptionMessagesBundle Properties Bundle and they are
 *         keyed on the exception code.
 *
 */
public class ModbusProtocolException extends Exception {

    private static final long serialVersionUID = -6155136065068974723L;

    private final ModbusProtocolErrorCode code;

        /**
     * Builds a new EdcException instance based on the supplied EdcErrorCode.
     *
     * @param code
     */
    public ModbusProtocolException(ModbusProtocolErrorCode code) {
        super();
        this.code = code;
    }

    /**
     * Builds a new EdcException instance based on the supplied EdcErrorCode and a message string
     *
     * @param code
     * @param message
     */
    public ModbusProtocolException(String message, ModbusProtocolErrorCode code) {
        super(message);
        this.code = code;
    }

    /**
     * Builds a new EdcException instance based on the supplied EdcErrorCode, an optional Throwable cause, and optional
     * arguments for the associated exception message.
     *
     * @param message
     * @param cause
     * @param code
     */
    public ModbusProtocolException(String message, Throwable cause, ModbusProtocolErrorCode code) {
        super(message, cause);
        this.code = code;
    }

    /**
     * Builds a new EdcException instance based on the supplied EdcErrorCode, an optional Throwable cause, and optional
     * arguments for the associated exception message.
     *
     * @param message
     * @param code
     */
    public ModbusProtocolException(Throwable cause, ModbusProtocolErrorCode code) {
        super(cause);
        this.code = code;
    }


    public ModbusProtocolErrorCode getCode() {
        return this.code;
    }
}
